package day04.abstract1;


public class Triangle extends Shape {

    public Triangle(Point point) {
        super(point);
    }

    /*
           ** 오버라이딩 복습 **
           상위 정의된 메서드를 하위에서 재정의하여 구현
           -> 여기에서는 상위클래스 Shape의 추상메서드 public abstract double area();를 오버라이딩함
              추상클래스이므로 area 메서드 구현은 강제입니다.
           -> 실행시점에서 하위클래스의 해당 메서드가 실행됨
        */
    @Override
    public double area() {
        /*
            해당 area 메서드를 주석하면 에러가 발생합니다.
            - 이유는 추상클래스를 상속하는 경우 상위의 추상메서드는 하위클래스에서 무조건 구현해야하는 제약이 생기기 떄문입니다.

            아래는 개인적인 생각입니다.
              상위 Shape 클래스는 생성자체가 안되기 때문에 하위클래스를 통해서 생성을 받아야 합니다. 이런 이유 때문에 하위클래스에서 구현이 안되어 있으면
              의미가 없기도 하고 이렇게 하지 않으면 다형성과 동적바인딩의 개념이 무의미해지는 부분과
              다형성을 통해 동적바인딩으로 코딩이 되어 있는 경우 실행도중 해당메서드를 찾지못하는 예외가 발생이
              될수도 있기 때문에 이런 부분을 미연에 방지하기 위한 장치로 판단됩니다.
              또한, 객체지향프로그래밍의 의미를 못살리게 되므로 제약을 걸어 두었다고 생각이 됩니다.
         */
        return 0.5 * point.getX() * point.getY();
    }
}
