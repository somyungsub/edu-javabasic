package day02;

/*
    제어문 (반복문)
     - 같은 내용 or 비슷한 내용 or 같은 로직을 여러번 처리해야하는 경우

    1. for (제일 많이 쓰임)
     - 초기값, 조건식, 증감식 등 같이 사용

    2. while (조건에 맞게 실행)
     - 조건식만 포함
     - 무한루프시에 많이 씀

    3. do ~ while (잘 안쓰임)
     - 일단 1번 실행 후 조건에 맞으면 실행

 */
public class Repeat {
    public static void main(String[] args) {
        /*
            for 문
            - i가 0 부터 시작해서 10 미만까지 실행
            - 총 10번 반복하게 됩니다.
         */
        for (int i = 0; i < 10; i++) {
            System.out.println(i);
        }
        System.out.println("--------------------------");
        /*
            보통 int형을 많이쓰지만 다음처럼 double형을 사용할 수도 있습니다.
            int형을 자주 쓰이는 이유는 배열에 index값이 정수이기 때문이고, 보통 조건문, 반복문, 배열의 조합으로 프로그래밍이 전반적으로 이루어지기 때문입니다.

            - 아래 반복문은 0.0부터 시작해서 10미만까지 d는 0.5씩 증가하는 반복문입니다.
            - 예상해보기 -> 또다른 자료형 예를들면 char, short, String 등등 도 가능할까요??
         */
        for (double d = 0.0; d < 10; d = d + 0.5) {
            System.out.println("ddd " + d);
        }
        System.out.println("--------------------------");
        /*
            이런식으로 String형을 사용할 수도 있습니다. 프로그래밍은 그 문제를 풀기위해 알고리즘을 구현하기 나름입니다. 무궁무진하겠죠??
            - 아래 반복문을 해석해보시기 바랍니다.
         */
        for (String s = "k"; !s.equals("kkkkk"); s += "k") {
            System.out.println("s = " + s);
        }
        System.out.println("--------------------------");

        for (char c = 'a'; c < 100; c++) {
            System.out.println(c);  // 예상해보기 -> 힌트 ! 문자 a는 아스키코드값 97에 해당됨
        }
        System.out.println("--------------------------");

        /*
            위는 전반적으로 0부터 시작해서 증가해나가는 예제였습니다.
            다음 반복문 처럼 i값을 감소해 나갈 수도 있습니다.
         */
        for (int i = 10; i > 0 ; i--) {
            System.out.println(i);
        }
        System.out.println("--------------------------");

        /*
            while 문
            - for문과 호환해서 사용 할 수 있습니다.
            - for -> while문 / while -> for문으로 의미상 변경할 수 있습니다.
            - 보통 while문은 무한루프를 사용해야할때 간단해서 무한루프를 사용할 때 자주 쓰입니다.

            무한루프란 조건식이 항상 true여서 무한적으로 반복되는 상황을 말합니다
         */

        /*
            아래 while 반복문은 맨위의 for과 같은 내용입니다. for문의 한줄에 for (int i = 0; i < 10; i++) 표현될 내용이 while은 3줄을 거치게 됩니다.
            따라서 지금과 같은 초기식, 조건식, 증감식을 모두 기재해서 로직(프로그래밍)을 짜야할 경우에는 for문을 많이 사용하며 대부분 for문을 활용하여 프로그래밍을 합니다.
         */
        int j = 0;  // j는 0으로 초기화
        while (j < 10) {
            j++;    // while문 블럭외부(위)에 j가 존재하기 때문에 바로위 j를 참조하게 됩니다.
            System.out.println("j = "+j);
        }
        System.out.println("--------------------------");

        /*
            다만 지금처럼 while문은 무한루프에 자주 활용 됩니다.
         */
        int kk = 0;
        while (true) {  // 조건식이 항상 true이므로 무한 반복
            System.out.println("무한루프->계속 이문장을 실행하게 되고 다음문장을 실행못하게 되므로 에러는 아니지만 큰 버그입니다. 가끔 컴퓨터나 핸드폰 무한루팅걸리시는 경우 입니다.. 심각한 버그인거죠" +
                    "따라서 개발자는 이런상황이 발생되지 않게 프로그래밍을 해야합니다. 그리고 무한루프는 가급적 실무에서도 활용을 안합니다. 너무 위험하기 때문에 차라히 아주큰값 1000000을 걸거나 그이상의 값을 취합니다. " +
                    "이것도 잘못된 방식이죠.. 애초에 이런 경우가 안나오게 해야 정상입니다");

            kk++; // kk변수를 1씩 증가시킵니다.

            // 그럼 무한루프를 어떻게 빠져나오느냐..? switch문 사용하실 때 기억나실지 모르겠습니다. switch문 (예제 Control2클래스)에서 break문이 기억나시나요? break문을 만나면 해당 블럭의 반복문 or switch문을 탈출합니다.
            if (kk > 10) {
                System.out.println("kk가 10보다 커지는 순간 이 조건문에 걸려서 실행되며 다음문장 break문을 만나고 해당 블럭의 while문을 빠져나옵니다. 즉 무한루프를 탈출합니다." +
                        "여기에서 알 수 있듯이 무한루프를 실행해야 할 경우 빠져나오는 탈출 조건을 걸어주어야 합니다. 근데 이 탈출조건이 가끔 안걸려서.. 어떤 이상한 상황에 의해.. 무한루프에 빠지는 경우가 발생합니다. " +
                        "그게 보통 무한루팅입니다. 그래서 컴퓨터를 끄고 다시 키면 되거나 하는경우 입니다. 소프트웨어 개발 자체가 사람이하는 작업들이고 사람이 한작업은 거의 100프로는 없기 때문에 항상 버그발생->버그처리->업데이트 수순을 밟게 되는 겁니다." +
                        "모든 소프트웨어가 그렇습니다.");
                break;
            }
        }

        for (;;){
            System.out.println("for문 무한루프 표현입니다. 보통 이표현보다는 위의 while문 표현을 거의 대부분 개발자가 사용합니다. 가끔 보실수도 있지만 관행을 따르는게 유지보수 측면에서 좋습니다.");
            System.out.println("아래 if문때문에 1번만 실행되고 종료합니다.");
            System.out.println("무한루프를 경험해보고 싶으시면 if문을 주석처리하시고, 실행 후 ctrl + z 또는 툴에서 run표시 옆에 빨간색 네모를 클릭하여 종료 하셔야 합니다");
            if (true) {
                break;
            }
        }

        /*
            일단 한번 실행 되는 do ~ while 반복문입니다.
             - 조건식을 위에서 먼저 판단하지 않고 뒤에서 판단합니다. 따라서 무조건 1번은 실행이 이루어지고, 이후 조건이 true이면 실행, false이면 탈출 입니다.
             - 주의 : 마지막에 ;(세미콜론)이 붙음
             - 이런게 있구나 정도로만 파악하시면 됩니다. 정말 안쓰입니다. 보통 for / while문으로 사용하고 이 2개로 모든표현이 가능합니다.
         */
        int k = 0;
        do {
            System.out.println("실행 : " + k);
            k++;
        } while (k < 1);
        System.out.println("--------------------------");

        /*
            중첩 반복문
            - 조건문도 중첩이 가능했죠?
            - 조건문과 반복문의 다중 조합이 많이 활용 됩니다. 조건문 안에 반복문, 반복문안에 조건문 등등...

         */
        System.out.println("간단한 구구단!");
        for (int i = 1; i < 10; i++) {
            for (int m = 1; m < 10; m++) {
                System.out.print(i + " x " + m + " = " + (i * m)+"\t"); // \t는 이스케이프 문자 tab을 의미
            }
            System.out.println();
        }

    }
}
